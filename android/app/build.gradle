apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'com.facebook.react'

android {
    namespace "com.sassycoders.vocalreminder"
    ndkVersion rootProject.ext.ndkVersion
    compileSdkVersion 34
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.sassycoders.vocalreminder"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        buildConfigField "boolean", "REACT_NATIVE_UNSTABLE_USE_RUNTIME_SCHEDULER_ALWAYS", 
            (findProperty("reactNative.unstable_useRuntimeSchedulerAlways") ?: true).toString()
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug // ‚ùó For production, use your own keystore
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled (findProperty('android.enableProguardInReleaseBuilds')?.toBoolean() ?: false)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        jniLibs.useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation "com.facebook.react:react-android" // version controlled by RN plugin

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true"
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

    if (isGifEnabled) {
        implementation "com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}"
    }

    if (isWebpEnabled) {
        implementation "com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}"
        if (isWebpAnimatedEnabled) {
            implementation "com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}"
        }
    }

    implementation "com.facebook.react:flipper-integration"

    if ((findProperty('expo.hermes.enabled') ?: "true").toBoolean()) {
        implementation "com.facebook.react:hermes-android"
    } else {
        implementation 'org.webkit:android-jsc:+'
    }
}

// Apply native module linking
apply from: new File(
    ["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"]
        .execute(null, rootDir)
        .text
        .trim(),
    "../native_modules.gradle"
)
applyNativeModulesAppBuildGradle(project)
